#! /bin/bash
#
# Copyright (C) 2012 Lorne Liechty
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

__ghi_exec_dir() {
	which $(git config alias.issue | cut -c 2-) | sed s/.ghi$//
}

# __ghidir accepts 0 or 1 arguments (i.e., location)
# returns location of .ghi dir in git repo
__ghidir () {
	local gitdir="$(__gitdir "${1-}")"

	if [ -d $gitdir ]; then
		echo ${gitdir/.git/.ghi}
	fi
}

__ghi_has_doubledash_option() {
	local c=1
	while [ $c -lt $cword ]; do
		if [[ "${words[c]}" == --* ]]; then
			echo 1
			return 0
		fi
		c=$((++c))
	done
	
	echo 0
	return 1
}

__ghi_status_opts() {
	git config -f $(__ghidir)/config --get-regexp status | sed s/^status.s..//
}

__ghi_issues_dir() {
	local ghidir="$(__ghidir "${1-}")"

	if [ -d $ghidir ]; then
		echo $ghidir/issues
	fi
}

__ghi_issues() {
	local issuesdir="$(__ghi_issues_dir "${1-}")"
	
	if [ -d "$issuesdir" ]; then
		ls -1 ${issuesdir}
	fi
}

__ghi_issues_short() {
	local issuesdir="$(__ghi_issues_dir "${1-}")"
	
	if [ -d "$issuesdir" ]; then
		ls -1 ${issuesdir} | cut -c 1-7
	fi
}

__ghi_is_str_leading_substr_of_issue_id() {
	for id in $(__ghi_issues); do
		if [[ "$id" =~ $1*  ]]; then
			echo 1; return 0
		fi
	done

	echo 0; return 1
}

__ghi_groups_dir() {
	local ghidir="$(__ghidir "${1-}")"

	if [ -d $ghidir ]; then
		echo $ghidir/groups
	fi
}

__ghi_groups() {
	local groupsdir="$(__ghi_groups_dir "${1-}")"
	
	if [ -d "$groupsdir" ]; then
		ls -1 ${groupsdir}
	fi
}

__ghi_is_str_groupname() {
	for group in $(__ghi_groups); do
		if [ $1 = $group ]; then
			echo 1;
			return
		fi
	done

	echo 0;
}

__ghi_is_str_leading_substr_of_group() {
	for id in $(__ghi_groups); do
		if [[ "$id" =~ $1*  ]]; then
			echo 1; return 0
		fi
	done

	echo 0; return 1
}

__ghi_issues_short_and_groups() {
	__ghi_issues_short
	__ghi_groups
}

_ghi_ls() {
	__git_has_doubledash && return

	case "$cur" in
	--*)
		__gitcomp "--group --sort"
		return
		;;
	*)
		local statusFlags="--sort"
		for flag in $statusFlags; do
			if [ "${words[$((${#words[@]}-2))]}" = $flag ]; then
				__gitcomp "status"
				return
			fi
		done

		__gitcomp "$(__ghi_issues_short)"
	;;
	esac
}

_ghi_add() {
	__git_has_doubledash && return

	case "$cur" in
	--*)
		__gitcomp "--description --group"
		return
		;;
	*)
		local statusFlags="--group -g"
		for flag in $statusFlags; do
			if [ "${words[$((${#words[@]}-2))]}" = $flag ]; then
				local IFS=$'\n'
				COMPREPLY=( \
					$(compgen -W "$(__ghi_groups)" \
					-- $cur))
				unset IFS
				return 0
			fi
		done
	;;
	esac
}

_ghi_edit() {
	__git_has_doubledash && return

	case "$cur" in
	--*)
		__gitcomp "--title --description --status"
		return
		;;
	*)
		local statusFlags="--status -s"
		for flag in $statusFlags; do
			if [ "${words[$((${#words[@]}-2))]}" = $flag ]; then
				local IFS=$'\n'
				COMPREPLY=( \
					$(compgen -W "$(__ghi_status_opts)" \
					-- $cur))
				unset IFS
				return 0
			fi
		done
		__gitcomp "$(__ghi_issues_short)"
	;;
	esac
}

_ghi_rm() {
	__git_has_doubledash && return

	case "$cur" in
	--*)
		__gitcomp "--force"
		return
		;;
	*)
		__gitcomp "$(__ghi_issues_short)"
	;;
	esac
}

_ghi_group() {
	case "$prev" in
	group)
		__gitcomp "$(__ghi_issues_short_and_groups)"
		return
		;;
	-d)
		__gitcomp "$(__ghi_issues_short_and_groups)"
		return
		;;
	*)
		if [ $(__ghi_is_str_groupname "$prev") = 1 ]; then
			return
		fi

		__gitcomp "$(__ghi_groups)"
		;;
	esac
}

_git_issue() {
	# First look for a subcommand...
	local subcommands="add edit rm group"
	local subcommand="$(__git_find_on_cmdline "$subcommands")"
	if [ -z "$subcommand" ]; then
		if [[ $(__ghi_has_doubledash_option) == 1 ]]; then
			_ghi_ls
			return
		fi

		case "$cur" in
		--*)
			_ghi_ls
			;;
		*)
			# If no subcommand found... see if our current word is the start of a subcommand
			for cmd in $subcommands; do
				if [[ "$cmd" =~ $cur ]]; then
					__gitcomp "$subcommands"
					return
				fi
			done

			# If no subcommand found... see if our current word is the start of an issue id or group
			if [ $(__ghi_is_str_leading_substr_of_issue_id "$cur") = 1 \
				 -o $(__ghi_is_str_leading_substr_of_group "$cur") = 1 ]; then
				__gitcomp "$(__ghi_issues_short_and_groups)"
				return
			fi

			# If no start of issue... offer subcommand completion option
			__gitcomp "$subcommands"
			return
			;;
		esac
	fi

	case "$subcommand" in
	add)
		_ghi_add
		;;
	edit)
		_ghi_edit
		;;
	rm)
		_ghi_rm
		;;
	group)
		_ghi_group
		;;
	esac
}

_ghi() {
	_get_comp_words_by_ref -n =: cur words cword prev

	# ghi has only one suggested subcommand when executed via "ghi", init.
	local subcommand
	for word in "${words[@]}"; do
		if [ "$word" = "init" ]; then
			subcommand="init"
		fi
	done
	
	if [ -z $subcommand ]; then
		if [[ $(__ghi_has_doubledash_option) == 1 ]]; then
			return
		fi

		case "$cur" in
		--*)
			__gitcomp "--version --help"
			;;
		*)
			__gitcomp "init"
			;;
		esac
		return
	fi

	case $subcommand in
	init)
		case "$cur" in
		--*)
			__gitcomp "--ghi_path"
			;;
		esac
		;;
	esac
}

complete -o bashdefault -o default -o nospace -F _ghi ghi 2>/dev/null
